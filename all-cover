#!/bin/sh
#
# Run all unit tests, as well as an end-to-end test which
# pushes a variety of requests through the system

# list of unit tests
#
TESTS=*Test.py

# location of coverage program
#
OSX_DIR==/opt/local/Library/Frameworks/Python.framework/Versions/2.6
if [ -d "$OSX_DIR" ]; then
    COVERAGE=$OSX_DIR/bin/coverage
else
    COVERAGE=`which coverage`
    if [ -z "$COVERAGE" ]; then
        COVERAGE=`which python-coverage`
        if [ -z "$COVERAGE" ]; then
            echo "$0: Cannot find Python coverage program" >&2
            exit 1
        fi
    fi
fi

SKIP_CONFIG=true

###########################################################################

# build list of files to check
#
PROGLIST=""
for f in *.py; do
    case "$f" in
	*Test*.py) ;;
	*Mock*.py) ;;
	*) PROGLIST="$PROGLIST $f" ;;
    esac
done

###########################################################################

# move aside the HitSpool state DB if it exists
#
HS_STATE_DB="$HOME/.hitspool_state.db"
if [ -f "$HS_STATE_DB" ]; then
    SAVED_STATE_DB="$HOME/saved.hs_state.db"
    if [ ! -f "$SAVED_STATE_DB" ]; then
        mv "$HS_STATE_DB" "$SAVED_STATE_DB"
    fi
fi

# add dglo's "hidden" run config directory
#
if [ -z "$PDAQ_CONFIG" -o ! -d "$PDAQ_CONFIG" ]; then
    if [ -d "$HOME/config" ]; then
        export PDAQ_CONFIG="$HOME/config"
    else
        if [ -d "$HOME/xxxconfig" ]; then
            export PDAQ_CONFIG="$HOME/xxxconfig"
        else
            echo "$0: Cannot find run config directory for PDAQ_CONFIG" >&2
            exit 1
        fi
    fi
fi

# clean out old compiled Python and old coverage report
#
rm -f *.pyc
for i in $PROGLIST; do
    rm -f $i,cover
done
rm -rf htmlcov

$COVERAGE erase

# run tests
#
append=
failed=0
faillist=
for i in $TESTS; do
    echo "::: $i" >&2
    if [ -f "$i"Test.py ]; then
        tst="$i"Test.py
    else
        if [ -f Test"$i".py ]; then
           tst=Test"$i".py
        else
            if [ -f "$i".py ]; then
                tst="$i".py
            else
                tst="$i"
            fi
        fi
    fi
    $COVERAGE run $append "$tst"
    if [ $? -ne 0 ]; then
        # add failed test to the list
        #
        failed=$((failed + 1))
        if [ -z "$faillist" ]; then
            faillist="$tst"
        else
            faillist="$faillist $tst"
        fi
    fi

    # make sure the HitSpool state DB wasn't created
    #
    if [ -f "$HS_STATE_DB" ]; then
        echo "ERROR: $tst created $HS_STATE_DB" >&2
    fi

    append="-a"
done

# build a comma-separated list of files to include
#
INCLUDE=`echo $PROGLIST | sed -e 's/ /,/g'`

# generate reports
#
$COVERAGE annotate --include="$INCLUDE"
$COVERAGE html --include="$INCLUDE"
$COVERAGE report --include="$INCLUDE"

if [ $failed -ne 0 ]; then
    if [ $failed -eq 1 ]; then
        tst="test"
    else
        tst="tests"
    fi
    echo "$0: $failed $tst failed: $faillist" >&2
    exit 1
fi

TEST_REQ=testbed/test-requests.py
if [ -f "$TEST_REQ" ]; then
    echo
    echo "$0: Pushing requests through the system (be patient, it's SLOW)"
    $TEST_REQ -q

    # make sure the HitSpool state DB wasn't created
    #
    if [ -f "$HS_STATE_DB" ]; then
        echo "ERROR: Testbed script created $HS_STATE_DB" >&2
    fi

    # move aside the HitSpool state DB if it exists
    #
    if [ -f "$SAVED_STATE_DB" ]; then
        mv "$SAVED_STATE_DB" "$HS_STATE_DB"
    fi
fi
